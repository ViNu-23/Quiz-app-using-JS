
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz App</title>
    <link rel="stylesheet" href="style.css"> <!-- Assuming you have a style.css file for your styling -->
</head>
<body>
    <div class="app">
        <h1>Quiz App</h1>
        <div class="quiz">
            <h2 id="question"></h2>
            <div id="answer-buttons"></div>
            <button id="next-btn" style="display: none;">Next</button>
        </div>
    </div>

    <script>
        let questions = [];
        const questionElement = document.getElementById("question");
        const answerButton = document.getElementById("answer-buttons");
        const nextButton = document.getElementById("next-btn");

        let currentQuestionIndex = 0;
        let score = 0;

        function startQuiz() {
            fetchQuestions(); // Start by fetching questions
            currentQuestionIndex = 0;
            score = 0;
            nextButton.innerHTML = "Next";
        }

        function fetchQuestions() {
            // Replace the hardcoded questions with an API call
            // You can replace the API URL and adjust parameters based on the API documentation
            const apiUrl = 'https://opentdb.com/api.php?amount=1&type=multiple';

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    const apiQuestion = data.results[0];
                    const question = apiQuestion.question;
                    const incorrectAnswers = apiQuestion.incorrect_answers;
                    const correctAnswer = apiQuestion.correct_answer;

                    // Format the question and answers
                    const formattedQuestion = {
                        question: question,
                        answer: [
                            { text: correctAnswer, correct: true },
                            ...incorrectAnswers.map(answer => ({ text: answer, correct: false }))
                        ]
                    };

                    displayQuestion(formattedQuestion);
                })
                .catch(error => console.error('Error fetching questions:', error));
        }

        function displayQuestion(question) {
            resetState();
            let questionNo = currentQuestionIndex + 1;
            questionElement.innerHTML = questionNo + ". " + question.question;

            question.answer.forEach((answer) => {
                const buttons = document.createElement("button");
                buttons.innerHTML = answer.text;
                buttons.classList.add('btn');
                answerButton.appendChild(buttons);
                if (answer.correct) {
                    buttons.dataset.correct = answer.correct;
                }
                buttons.addEventListener('click', selectAnswer);
            });
        }

        function resetState() {
            nextButton.style.display = 'none';
            while (answerButton.firstChild) {
                answerButton.removeChild(answerButton.firstChild);
            }
        }

        function selectAnswer(e) {
            const selectedBtn = e.target;
            const isCorrect = selectedBtn.dataset.correct === 'true';
            if (isCorrect) {
                selectedBtn.classList.add('correct');
                score++;
            } else {
                selectedBtn.classList.add('incorrect');
            }
            Array.from(answerButton.children).forEach(buttons => {
                buttons.disabled = true;
            });
            nextButton.style.display = 'block';
        }

        function showScore() {
            resetState();
            questionElement.innerHTML = `You scored ${score} out of ${questions.length} !`;
            nextButton.innerHTML = 'Play Again';
            nextButton.style.display = 'block';
        }

        function handleNextButton() {
            currentQuestionIndex++;
            if (currentQuestionIndex < questions.length) {
                fetchQuestions();
            } else {
                showScore();
            }
        }

        nextButton.addEventListener('click', () => {
            if (currentQuestionIndex < questions.length) {
                handleNextButton();
            } else {
                startQuiz();
            }
        });

        startQuiz();
    </script>
</body>
</html>
